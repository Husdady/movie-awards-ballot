{"version":3,"file":"static/js/181.a7934a40.chunk.js","mappings":"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","sources":["components/layout/MovieImage.tsx","components/layout/Movie.tsx","components/layout/MoviesVoted.js","components/layout/SubmitVotes.tsx","components/layout/Movies.tsx"],"sourcesContent":["// React\r\nimport React, { memo, useState, useEffect, useCallback } from 'react';\r\n\r\n// Components\r\nimport { Flex, Button } from \"@common\";\r\n\r\n// Librarys\r\nimport { message } from \"antd\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faVoteYea, faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// Hooks\r\nimport { useMovies } from \"@hooks\";\r\n\r\n// Utils\r\nimport Helper from \"@utils/Helper\";\r\nimport { isEmptyArray } from \"@utils/Validations\";\r\n\r\ninterface MovieImageProps {\r\n  movie: any,\r\n}\r\n\r\nconst MovieImage = memo((props: MovieImageProps) => {\r\n  const { moviesVoted, addMovieVote } = useMovies();\r\n  const [isVoted, setMovieVote] = useState(false);\r\n\r\n  const onMount = useCallback(() => {\r\n    const isResetMoviesVoted = isVoted && isEmptyArray(moviesVoted);\r\n    if (isResetMoviesVoted) return setMovieVote(false);\r\n  }, [isVoted, moviesVoted]);\r\n\r\n  const handleVote = useCallback(() => {\r\n    setMovieVote(true);\r\n    addMovieVote(props.movie);\r\n    message.success(`You voted for the movie ${props.movie.title}`)\r\n  }, [addMovieVote, props.movie]);\r\n\r\n  const renderContent = useCallback(() => {\r\n    if (isVoted) return <AlreadyMovieVoted />\r\n\r\n    return (\r\n      <Button\r\n        className=\"vote\"\r\n        title=\"Vote for this movie\"\r\n        backgroundColor=\"var(--bg-darkred)\"\r\n        icon={{ name: faVoteYea }}\r\n        onClick={handleVote}\r\n      />\r\n    )\r\n  }, [isVoted, handleVote]);\r\n\r\n  useEffect(() => onMount(), [moviesVoted, onMount]);\r\n\r\n  const altImg = Helper.convertEmptySpacesInHyphens(props.movie.title)\r\n  const backgroundColor = isVoted ? \"rgba(0,0,0,.84)\" : \"rgba(0,0,0,.64)\";\r\n\r\n\treturn (\r\n    <figure className=\"position-relative\">\r\n\t   <img\r\n      height={450}\r\n      alt={altImg}\r\n      src={props.movie.photoUrL}\r\n      className=\"movie-image\"\r\n     />\r\n     <Flex\r\n       align=\"center\"\r\n       justify=\"center\"\r\n       className=\"wrapper\"\r\n       style={{ backgroundColor }}\r\n     >\r\n        {renderContent()}\r\n     </Flex>\r\n    </figure>\r\n\t)\r\n});\r\n\r\nexport default MovieImage;\r\n\r\nconst AlreadyMovieVoted = () => {\r\n  return (\r\n    <div className=\"vote\">\r\n      {/* Check icon */}\r\n      <FontAwesomeIcon\r\n        icon={faCheckCircle}\r\n        color=\"var(--bg-green)\"\r\n        className=\"d-block mx-auto\"\r\n      />\r\n\r\n      {/* Text */}\r\n      <span\r\n        className=\"d-block\"\r\n        style={{ color: \"var(--bg-green)\" }}\r\n      >\r\n        You voted for this movie\r\n      </span>\r\n    </div>\r\n  )\r\n}","// React\r\nimport React, { memo } from 'react';\r\n\r\n// Components\r\nimport MovieImage from \"./MovieImage\";\r\n\r\n// Librarys\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface MovieProps {\r\n  id: string,\r\n  title: string,\r\n  photoUrL: string,\r\n  category: string,\r\n}\r\n\r\nconst Movie = memo((props: MovieProps) => {\r\n  return (\r\n    <article className=\"movie\">\r\n      {/* Movie Image */}\r\n      <MovieImage movie={props} />\r\n\r\n    \t{/* Movie Name */}\r\n    \t<Title level={4} className=\"title text-center\">{props.title}</Title>\r\n    </article>\r\n  );\r\n});\r\n\r\nexport default Movie;\r\n","// React\r\nimport React, { useCallback } from \"react\";\r\n\r\n// Librarys\r\nimport { List, Typography } from \"antd\";\r\n\r\n// Hooks\r\nimport { useMovies } from \"@hooks\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst MoviesVoted = () => {\r\n\tconst { moviesVoted } = useMovies();\r\n\r\n\tconst renderMovies = useCallback((movie) => {\r\n\t\treturn (\r\n\t\t\t<List.Item className=\"movie-vote\">\r\n\t\t\t\t{/* Movie Image */}\r\n\t\t\t\t<figure>\r\n\t\t\t\t\t<img src={movie.photoUrL} width={150} height={150} />\r\n\t\t\t\t</figure>\r\n\r\n\t\t\t\t<section>\r\n\t\t\t\t\t{/* Movie title */}\r\n\t\t\t\t\t<Title level={4} className=\"title mb-0\">Movie name:</Title>\r\n\t\t\t\t\t<Title level={5} className=\"value mt-0\">{movie.title}</Title>\r\n\r\n\t\t\t\t\t{/* Movie Category */}\r\n\t\t\t\t\t<Title level={4} className=\"title mt-0 mb-0\">Movie category:</Title>\r\n\t\t\t\t\t<Title level={5} className=\"value mt-0\">{movie.category}</Title>\r\n\t\t\t\t</section>\r\n\t\t\t</List.Item>\r\n\t\t)\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<List\r\n\t\t\tsize=\"large\"\r\n\t\t\tclassName=\"movies-voted\"\r\n      dataSource={moviesVoted}\r\n      renderItem={renderMovies}\r\n   \t/>\r\n  )\r\n}\r\n\r\nexport default MoviesVoted;\r\n","// React\r\nimport React, { Fragment, useState, useCallback } from \"react\";\r\n\r\n// Components\r\nimport { Button } from \"@common\";\r\nimport MoviesVoted from \"./MoviesVoted\";\r\n\r\n// Librarys\r\nimport { Modal, message } from \"antd\";\r\n\r\n// Hooks\r\nimport { useMovies } from \"@hooks\";\r\n\r\n// Utils\r\nimport { isEmptyArray } from \"@utils/Validations\";\r\n\r\nconst SubmitVotes = () => {\r\n\tconst { moviesVoted, setDefaultMoviesVoted } = useMovies();\r\n\tconst [isModalVisible, setModalVisibility] = useState(false);\r\n\r\n\tconst handleShowModal = useCallback(() => {\r\n\t\tif (isEmptyArray(moviesVoted)) {\r\n\t\t\treturn message.warning(\"No movie votes yet\")\r\n\t\t}\r\n\r\n\t\tsetModalVisibility(true)\r\n\t}, [moviesVoted]);\r\n\r\n\tconst handleHideModal = useCallback(() => setModalVisibility(false), []); \r\n\r\n\tconst handleCancel = useCallback(() => {\r\n\t\thandleHideModal();\r\n\t\tsetDefaultMoviesVoted();\r\n\t\treturn message.info(\"All movie votes have been reset\")\r\n\t}, [handleHideModal, setDefaultMoviesVoted]);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Button\r\n\t\t\t\ttitle=\"Submit votes\"\r\n\t\t\t\tclassName=\"submit-votes\"\r\n\t\t\t\tonClick={handleShowModal}\r\n\t\t\t/>\r\n\r\n\t\t\t<Modal\r\n\t\t\t\ttitle=\"Votes Submitted\"\r\n\t\t\t\tvisible={isModalVisible}\r\n\t\t\t\tonCancel={handleHideModal}\r\n\t\t\t\tfooter={<Cancel onCancel={handleCancel} />}\r\n\t\t\t>\r\n\t\t\t\t<MoviesVoted />\r\n\t\t\t</Modal>\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n\r\nexport default SubmitVotes;\r\n\r\nconst Cancel = ({ onCancel } : {onCancel:any}) => {\r\n\treturn (\r\n\t\t<Button\r\n\t\t\ttitle=\"Cancel\"\r\n\t\t\tonClick={onCancel}\r\n\t\t\tclassName=\"close-modal\"\r\n\t\t\tbackgroundColor=\"var(--bg-darkyellow)\"\r\n\t\t/>\r\n\t)\r\n}","// React\r\nimport React, { Fragment, useEffect } from 'react';\r\n\r\n// Components\r\nimport Movie from \"./Movie\";\r\nimport SubmitVotes from \"./SubmitVotes\";\r\nimport { Carousel, Skeletons } from \"@common\";\r\n\r\n// Librarys\r\nimport { Typography } from \"antd\";\r\nimport { SwiperSlide } from \"swiper/react\";\r\n\r\n// Hooks\r\nimport { useMovies } from \"@hooks\";\r\n\r\n// Utils\r\nimport { isEmptyObject } from \"@utils/Validations\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Movies = () => {\r\n\tconst { getMovies, groupedMovies } = useMovies();\r\n\r\n\tuseEffect(() =>{\r\n\t\tgetMovies();\r\n\t}, [getMovies]);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{/* Grouped Movies */}\r\n\t\t\t<section className=\"mt-30 mb-20\">\r\n\t\t\t\t{renderGroupedMovies(groupedMovies)}\r\n\t\t\t</section>\r\n\t\t\t\r\n\t\t\t{/* Submit Votes Button */}\r\n\t\t\t<SubmitVotes />\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n\r\nfunction renderGroupedMovies(groupedMovies:any) {\r\n\tif (isEmptyObject(groupedMovies)) {\r\n\t\treturn <Skeletons totalItems={36} />\r\n\t}\r\n\r\n\tconst keys = Object.keys(groupedMovies);\r\n\r\n\tkeys.sort();\r\n\r\n\treturn keys.map(key => (\r\n\t\t<section key={key} className=\"mt-20\">\r\n\t\t\t<Title level={2} className=\"movie-category\">{key}</Title>\r\n\t\t\t{renderMovies(groupedMovies[key].movies)}\r\n\t\t</section>\r\n\t))\r\n\t// \r\n}\r\n\r\ntype MovieType = {\r\n\tid: string,\r\n\tphotoUrL: string,\r\n\tcategory: string,\r\n\ttitle: string,\r\n}\r\n\r\nfunction renderMovies(movies:Array<MovieType>) {\r\n\treturn (\r\n\t\t<Carousel speed={4000} spaceBetween={10} className=\"movies\">\r\n\t\t\t{movies.map((movie, i) => (\r\n\t\t\t\t<SwiperSlide key={`${movie.id}-${i}`}>\r\n\t\t\t\t\t<Movie {...movie} />\r\n\t\t\t\t</SwiperSlide>\r\n\t\t\t))}\r\n\t\t</Carousel>\r\n\t)\r\n}\r\n\r\nexport default Movies;\r\n"],"names":["memo","props","useMovies","moviesVoted","addMovieVote","useState","isVoted","setMovieVote","onMount","useCallback","isEmptyArray","handleVote","movie","message","title","renderContent","AlreadyMovieVoted","className","backgroundColor","icon","name","faVoteYea","onClick","useEffect","altImg","Helper","height","alt","src","photoUrL","align","justify","style","faCheckCircle","color","Title","Typography","level","renderMovies","width","category","size","dataSource","renderItem","setDefaultMoviesVoted","isModalVisible","setModalVisibility","handleShowModal","handleHideModal","handleCancel","Fragment","visible","onCancel","footer","Cancel","renderGroupedMovies","groupedMovies","isEmptyObject","totalItems","keys","Object","sort","map","key","movies","speed","spaceBetween","i","id","getMovies"],"sourceRoot":""}